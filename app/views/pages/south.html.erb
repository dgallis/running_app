<!DOCTYPE html>
<html>
    <head>
    <title>Geolocation</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 80%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
	  		#directions-panel {
		margin-top: 10px;
		background-color: #FFEE77;
		padding: 10px;
		overflow: scroll;
		height: 174px;
      }
	  		#elevation_chart{
		margin-top: 10px;
		background-color: #FFEE77;
		padding: 10px;
		overflow: scroll;
		height: 174px;
		
      }
      html, heyo
      {
      	color: white;
      }
      
    </style>
	    <script src="https://www.google.com/jsapi"></script>

  </head>
<body>

<div>
<heyo><b>
Miles you would like to go: 
</b></heyo>
<input type="text" id=myText onfocus="this.value=''" value="Distance">

<button onclick="getRad()">Lets Go!</button>
</div>

<div id="elevation_chart"></div>

<div id="map"></div>

<div id="directions-panel"></div>


<script>
	 // Load the Visualization API and the columnchart package.
    google.load('visualization', '1', {packages: ['columnchart']});
	//http://www.movable-type.co.uk/scripts/latlong.html
	// used to get the distance from coords
	var map;
	function initMap(pos, coord1,coord2,coord3) {
	  var directionsService = new google.maps.DirectionsService();
	  var directionsDisplay = new google.maps.DirectionsRenderer();
	  var chicago = new google.maps.LatLng(41.850033, -87.6500523);
	  var mapOptions = {
		zoom:7,
		center: chicago
	  }
	  map = new google.maps.Map(document.getElementById('map'), mapOptions);
	  directionsDisplay.setMap(map);
          calcRoute(pos, coord1,coord2,coord3,directionsService, directionsDisplay);
        //});
	}
	function updateMap(){
		 navigator.geolocation.getCurrentPosition(function (position) {
			 initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
			 map.panTo(initialLocation);
		 });
		
	}
	function calcRoute(start,position1,position2,position3,directionsService,directionsDisplay) {
	  var start = start;
	  var end = start;
	  var waypts = [position1,position2,position3];
	  var request = {
        origin: start,
        destination:start,
		waypoints: waypts,
		optimizeWaypoints: true,
		travelMode: 'WALKING'
	  };
	  
	  directionsService.route(request, function(response, status) {
		if (status == 'OK') {
			directionsDisplay.setDirections(response);
			            var route = response.routes[0];
            var summaryPanel = document.getElementById('directions-panel');
            summaryPanel.innerHTML = '';
			
			var totalDistance=0;
			var  ans;
            // For each route, display summary information.
            for (var i = 0; i < route.legs.length; i++) {
              var routeSegment = i + 1;
              summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                  '</b><br>';
              summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
              summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
              summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
			  ans = route.legs[i].distance.text
			  var tests = ans.substr(0, ans.indexOf(' '));
			  totalDistance+=parseFloat(tests);
			  
            }
			summaryPanel.innerHTML+='<b>Total Distance: '+totalDistance+'</b><br>';
		}
		else{document.getElementById('nope2').value = "notgivenaFuck";}
	  });
	}
	
	function goSomeWhere(o1,l1,rad,posOld,radi)
	{
		var R = 6378.1;
		var d = rad; // distance traveled
		var brng = radi* (Math.PI/180); // degrees to radians
		o1 = o1 * (Math.PI/180);
		l1 = l1 * (Math.PI/180);
		var o2 = Math.asin(Math.sin(o1)*Math.cos(d/R)+Math.cos(o1)*Math.sin(d/R)*Math.cos(brng));
		var l2 = l1 + Math.atan2(Math.sin(brng)*Math.sin(d/R)*Math.cos(o1),Math.cos(d/R)-Math.sin(o1)*Math.sin(o2));
		//document.getElementById('nope2').value = 
		return [o2*(180 / Math.PI),l2*(180 / Math.PI)];
	}
	
	
	function init(a)
	{
	
		  if (navigator.geolocation) 
		  {
		
		  navigator.geolocation.getCurrentPosition(function(position) {
			var pos = {
			  lat: position.coords.latitude,
			  lng: position.coords.longitude
			};
			var pos2 = [position.coords.latitude,position.coords.longitude];
			var newpos1 = goSomeWhere(pos2[0],pos2[1],a,pos,180);
			var newpos2 = goSomeWhere(pos2[0],pos2[1],a,pos,45+180);
			var newpos3 = goSomeWhere(pos2[0],pos2[1],a,pos,-45+180);
			
			var coord1 = {location:{lat: newpos3[0],lng: newpos3[1]}};				
			var coord2 = {location:{lat: newpos1[0],lng: newpos1[1]}};				
			var coord3 = {location:{lat: newpos2[0],lng: newpos2[1]}};	
			
			var coord11 = {lat: newpos3[0],lng: newpos3[1]};				
			var coord22 = {lat: newpos1[0],lng: newpos1[1]};				
			var coord33 = {lat: newpos2[0],lng: newpos2[1]};				
			initMap(pos, coord1,coord2,coord3);
			//get paths
			var path = [pos,coord11,coord22,coord33,pos];
			// Create an ElevationService.
			var elevator = new google.maps.ElevationService;
			// Initiate the path request.
			elevator.getElevationAlongPath({
			  'path': path,
			  'samples': 256
			}, plotElevation);
			setInterval(updateMap,500);
			
			});
			
		} else {
		  // Browser doesn't support Geolocation
		  handleLocationError(false, infoWindow, map.getCenter());
		}
	}
	
	function plotElevation(elevations, status) {
        var chartDiv = document.getElementById('elevation_chart');
        if (status !== 'OK') {
          // Show the error code inside the chartDiv.
          chartDiv.innerHTML = 'Cannot show elevation: request failed because ' +
              status;
          return;
        }
        // Create a new chart in the elevation_chart DIV.
        var chart = new google.visualization.ColumnChart(chartDiv);
        // Extract the data from which to populate the chart.
        // Because the samples are equidistant, the 'Sample'
        // column here does double duty as distance along the
        // X axis.
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Sample');
        data.addColumn('number', 'Elevation');
        for (var i = 0; i < elevations.length; i++) {
          data.addRow(['', elevations[i].elevation]);
        }
        // Draw the chart using the data within its DIV.
        chart.draw(data, {
          height: 150,
          legend: 'none',
          titleY: 'Elevation (m)'
        });
      }
	/*
	function ShowPath(p1,p2)
	{
		
	
	}
	*/
	function getRad() {
	  var dis = parseFloat(document.getElementById('myText').value);
	  var rad = (((dis/3.14))*1.60934)*.725;// to km // also reduce the length since not going to get a perfect route
	  init(rad); // convert miles to km to make it easier to do the math
	}
</script>
<script src="http://maps.googleapis.com/maps/api/js?sensor=true" type="text/javascript"></script>
    <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBLeq5PYqVs4OKZEDJSsV1X3-ePPme3Grc&callback=initMap">
    </script>
</body>
</html>